---
const title = 'See the full picture of your MCP usage';
const subtitle = 'Get actionable insights from every interaction. Track prompt patterns, measure tool effectiveness, and optimize your MCP server based on real data.';
const features = [
  {
    icon: 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z',
    title: 'Prompt Intelligence',
    description: 'Automatically categorize and analyze prompts to understand user intent',
    color: 'blue'
  },
  {
    icon: 'M13 7h8m0 0v8m0-8l-8 8-4-4-6 6',
    title: 'Usage Trends',
    description: 'Identify peak usage times and plan capacity accordingly',
    color: 'purple'
  },
  {
    icon: 'M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4',
    title: 'Tool Optimization',
    description: 'Discover which tools deliver the most value to your users',
    color: 'green'
  }
];
const chartTitle = 'Weekly Prompt Volume';
const chartTotal = '12,847';
const chartGrowth = 'â†‘ 23%';
const chartData = [
  { day: 'Mon', value: 65, count: '1,834' },
  { day: 'Tue', value: 80, count: '2,256' },
  { day: 'Wed', value: 90, count: '2,538' },
  { day: 'Thu', value: 95, count: '2,679', isHighlight: true },
  { day: 'Fri', value: 70, count: '1,976' },
  { day: 'Sat', value: 35, count: '988' },
  { day: 'Sun', value: 20, count: '576' }
];
const bottomStats = [
  { value: '156ms', label: 'Avg Response' },
  { value: '98.7%', label: 'Success Rate' },
  { value: '4.2', label: 'Tools/Prompt' }
];

const getColorClass = (color: string) => {
  const colors: Record<string, string> = {
    blue: 'bg-blue-500',
    purple: 'bg-purple-500',
    green: 'bg-green-500'
  };
  return colors[color] || 'bg-blue-500';
};
---

<style>
  @keyframes slideUp {
    from {
      transform: translateY(10px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  
  .animate-slide-up {
    animation: slideUp 0.6s ease-out forwards;
  }
  
  .chart-bar {
    transition: all 0.3s ease;
  }
  
  .chart-bar:hover {
    opacity: 0.8;
  }
</style>

<div id="usage-insights" class="bg-white dark:bg-slate-900 py-24 sm:py-32">
  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-12">
      <a href="#usage-insights" class="inline-flex items-center rounded-full bg-green-100 dark:bg-green-900/30 px-4 py-1.5 text-sm font-medium text-green-800 dark:text-green-200 mb-4 hover:bg-green-200 dark:hover:bg-green-900/50 transition-colors cursor-pointer">
        <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
        </svg>
        Usage Insights
      </a>
    </div>
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
      <div>
        <h2 class="text-3xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-4xl">
          See the full picture of your <span class="text-green-600 dark:text-green-400">MCP usage</span>
        </h2>
        <p class="mt-4 text-lg text-gray-600 dark:text-gray-400">
          {subtitle}
        </p>
        
        <div class="mt-8 space-y-4">
          {features.map((feature) => (
            <div class="flex items-start">
              <div class="flex-shrink-0">
                <div class={`flex items-center justify-center h-10 w-10 rounded-md ${getColorClass(feature.color)} text-white`}>
                  <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={feature.icon} />
                  </svg>
                </div>
              </div>
              <div class="ml-4">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white">{feature.title}</h3>
                <p class="mt-1 text-gray-600 dark:text-gray-400">{feature.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      <div class="bg-gray-50 dark:bg-gray-800 rounded-2xl p-6 shadow-xl">
        <div class="mb-6">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">{chartTitle}</h3>
          <div class="flex items-baseline">
            <span class="text-3xl font-bold text-gray-900 dark:text-white">{chartTotal}</span>
            <span class="ml-2 text-sm text-green-600 dark:text-green-400">{chartGrowth}</span>
          </div>
        </div>
        
        <div class="space-y-3">
          {chartData.map((item) => (
            <div class="flex items-center justify-between">
              <span class="text-sm text-gray-600 dark:text-gray-400">{item.day}</span>
              <div class="flex-1 mx-3 bg-gray-200 dark:bg-gray-700 rounded-full h-2 overflow-hidden">
                <div class={`chart-bar h-full rounded-full ${item.isHighlight ? 'bg-purple-500' : item.value < 40 ? 'bg-gray-400' : 'bg-blue-500'}`} style={`width: ${item.value}%`}></div>
              </div>
              <span class="text-sm font-medium text-gray-900 dark:text-white">{item.count}</span>
            </div>
          ))}
        </div>
        
        <div class="mt-6 pt-6 border-t border-gray-200 dark:border-gray-700">
          <div class="grid grid-cols-3 gap-4 text-center">
            {bottomStats.map((stat) => (
              <div>
                <div class="text-2xl font-bold text-gray-900 dark:text-white">{stat.value}</div>
                <div class="text-xs text-gray-600 dark:text-gray-400">{stat.label}</div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>