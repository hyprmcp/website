---
export interface Props {
  title: string;
  subtitle: string;
  features: Array<{
    icon: string;
    title: string;
    description: string;
    color: string;
  }>;
  chartTitle: string;
  chartTotal: string;
  chartGrowth: string;
  chartData: Array<{
    day: string;
    value: number;
    count: string;
    isHighlight?: boolean;
  }>;
  bottomStats: Array<{
    value: string;
    label: string;
  }>;
}

const {
  title,
  subtitle,
  features,
  chartTitle,
  chartTotal,
  chartGrowth,
  chartData,
  bottomStats
} = Astro.props;

const getColorClass = (color: string) => {
  const colors: Record<string, string> = {
    blue: 'bg-blue-500',
    purple: 'bg-purple-500',
    green: 'bg-green-500'
  };
  return colors[color] || 'bg-blue-500';
};
---

<style>
  @keyframes slideUp {
    from {
      transform: translateY(10px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  
  .animate-slide-up {
    animation: slideUp 0.6s ease-out forwards;
  }
  
  .chart-bar {
    transition: all 0.3s ease;
  }
  
  .chart-bar:hover {
    opacity: 0.8;
  }
</style>

<div class="bg-white dark:bg-slate-900 py-24 sm:py-32">
  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
      <div>
        <h2 class="text-3xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-4xl">
          {title}
        </h2>
        <p class="mt-4 text-lg text-gray-600 dark:text-gray-400">
          {subtitle}
        </p>
        
        <div class="mt-8 space-y-4">
          {features.map((feature) => (
            <div class="flex items-start">
              <div class="flex-shrink-0">
                <div class={`flex items-center justify-center h-10 w-10 rounded-md ${getColorClass(feature.color)} text-white`}>
                  <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={feature.icon} />
                  </svg>
                </div>
              </div>
              <div class="ml-4">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white">{feature.title}</h3>
                <p class="mt-1 text-gray-600 dark:text-gray-400">{feature.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      <div class="bg-gray-50 dark:bg-gray-800 rounded-2xl p-6 shadow-xl">
        <div class="mb-6">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">{chartTitle}</h3>
          <div class="flex items-baseline">
            <span class="text-3xl font-bold text-gray-900 dark:text-white">{chartTotal}</span>
            <span class="ml-2 text-sm text-green-600 dark:text-green-400">{chartGrowth}</span>
          </div>
        </div>
        
        <div class="space-y-3">
          {chartData.map((item) => (
            <div class="flex items-center justify-between">
              <span class="text-sm text-gray-600 dark:text-gray-400">{item.day}</span>
              <div class="flex-1 mx-3 bg-gray-200 dark:bg-gray-700 rounded-full h-2 overflow-hidden">
                <div class={`chart-bar h-full rounded-full ${item.isHighlight ? 'bg-purple-500' : item.value < 40 ? 'bg-gray-400' : 'bg-blue-500'}`} style={`width: ${item.value}%`}></div>
              </div>
              <span class="text-sm font-medium text-gray-900 dark:text-white">{item.count}</span>
            </div>
          ))}
        </div>
        
        <div class="mt-6 pt-6 border-t border-gray-200 dark:border-gray-700">
          <div class="grid grid-cols-3 gap-4 text-center">
            {bottomStats.map((stat) => (
              <div>
                <div class="text-2xl font-bold text-gray-900 dark:text-white">{stat.value}</div>
                <div class="text-xs text-gray-600 dark:text-gray-400">{stat.label}</div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>