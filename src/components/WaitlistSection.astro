---
import {Icon} from '@astrojs/starlight/components';
---

<style>
  .hero-bg {
    background-image: linear-gradient(0deg, transparent 49%, rgba(34, 197, 94, 0.15) 49.5%, rgba(249, 115, 22, 0.15) 50.5%, transparent 51%),
                      linear-gradient(90deg, transparent 49%, rgba(34, 197, 94, 0.15) 49.5%, rgba(249, 115, 22, 0.15) 50.5%, transparent 51%);
    background-size: 200px 200px;
  }

  .dark .hero-bg {
    background-image: linear-gradient(0deg, transparent 49%, rgba(37, 99, 235, 0.2) 49.5%, rgba(168, 85, 247, 0.2) 50.5%, transparent 51%),
                      linear-gradient(90deg, transparent 49%, rgba(37, 99, 235, 0.2) 49.5%, rgba(168, 85, 247, 0.2) 50.5%, transparent 51%);
    background-size: 200px 200px;
  }
</style>

<div class="relative overflow-hidden bg-gray-50 dark:bg-slate-900 hero-bg pt-8 sm:pt-16 pb-32 border-b border-gray-200 dark:border-gray-800">
  <div class="absolute inset-0 bg-gray-50/80 dark:bg-slate-900/80"></div>
  <div class="relative mx-auto max-w-4xl px-4 sm:px-6 lg:px-8">
    <div class="text-center">
      <div class="inline-flex items-center rounded-full bg-blue-100 dark:bg-blue-900/30 px-6 py-2 text-sm font-medium text-blue-800 dark:text-blue-200 mb-8">
        <Icon name="rocket" class="mr-2 h-4 w-4" />
        Early Access
      </div>
      <h1 class="text-4xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-6xl">
        Join the Jetski Waitlist
      </h1>
      <p class="mt-6 text-lg leading-8 text-gray-600 dark:text-gray-400">
        We're currently in private beta, onboarding one new MCP server every day.
        <br />
        Be among the first to experience serverless MCP deployment.
      </p>
    </div>

    <div class="mt-16">
      <div class="rounded-2xl bg-white dark:bg-gray-900 p-8 shadow-lg ring-1 ring-gray-200 dark:ring-gray-800">
        <div class="text-center mb-8">
          <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Get Early Access</h2>
          <p class="mt-2 text-gray-600 dark:text-gray-400">
            Join leading AI developers already on the waitlist
          </p>
        </div>

        <form id="waitlistForm" class="space-y-6">
          <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
            <div>
              <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Name
              </label>
              <input
                type="text"
                id="name"
                name="name"
                required
                class="mt-1 block w-full rounded-md border-0 py-3 px-4 bg-gray-50 dark:bg-gray-800 text-gray-900 dark:text-white shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
                placeholder="Your full name"
              />
            </div>

            <div>
              <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Email
              </label>
              <input
                type="email"
                id="email"
                name="email"
                required
                class="mt-1 block w-full rounded-md border-0 py-3 px-4 bg-gray-50 dark:bg-gray-800 text-gray-900 dark:text-white shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
                placeholder="your@email.com"
              />
            </div>
          </div>

          <div>
            <label for="useCase" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Use Case
            </label>
            <select
              id="useCase"
              name="useCase"
              required
              class="mt-1 block w-full rounded-md border-0 py-3 px-4 bg-gray-50 dark:bg-gray-800 text-gray-900 dark:text-white shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
            >
              <option value="" disabled selected>Select your primary use case</option>
              <option value="personal-project">Personal Project</option>
              <option value="startup">Startup/Small Business</option>
              <option value="enterprise">Enterprise</option>
              <option value="research">Research/Academic</option>
              <option value="open-source">Open Source Project</option>
              <option value="other">Other</option>
            </select>
          </div>

          <div>
            <label for="notes" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Additional Notes
            </label>
            <textarea
              id="notes"
              name="notes"
              rows="4"
              class="mt-1 block w-full rounded-md border-0 py-3 px-4 bg-gray-50 dark:bg-gray-800 text-gray-900 dark:text-white shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
              placeholder="Tell us about your MCP server plans, specific requirements, or questions..."
            ></textarea>
          </div>

          <div class="pt-4">
            <button
              type="submit"
              id="submitBtn"
              class="w-full rounded-md bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 px-6 py-3 text-sm font-semibold text-white shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600 transition-colors duration-200 cursor-pointer"
            >
              <span id="submitText">Join Waitlist</span>
              <span id="loadingText" class="hidden">Joining...</span>
            </button>
          </div>
        </form>

        <div id="successMessage" class="hidden mt-6 p-4 bg-green-50 dark:bg-green-900/30 border border-green-200 dark:border-green-800 rounded-md">
          <div class="flex items-center">
            <Icon name="approve-check" class="h-5 w-5 text-green-600 mr-2" />
            <p class="text-sm font-medium text-green-800 dark:text-green-200">
              Successfully joined the waitlist! We'll be in touch soon.
            </p>
          </div>
        </div>

        <div id="errorMessage" class="hidden mt-6 p-4 bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-800 rounded-md">
          <div class="flex items-center">
            <Icon name="warning" class="h-5 w-5 text-red-600 mr-2" />
            <p class="text-sm font-medium text-red-800 dark:text-red-200">
              Something went wrong. Please try again later.
            </p>
          </div>
        </div>

        <div class="mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
          <div class="flex items-center justify-center space-x-8 text-sm text-gray-500 dark:text-gray-400">
            <div class="flex items-center">
              <Icon name="approve-check" class="mr-2 h-4 w-4 text-green-600" />
              No spam, ever
            </div>
            <div class="flex items-center">
              <Icon name="approve-check" class="mr-2 h-4 w-4 text-green-600" />
              Early access priority
            </div>
            <div class="flex items-center">
              <Icon name="approve-check" class="mr-2 h-4 w-4 text-green-600" />
              Updates on launch
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  interface WaitlistFormData {
    name: string;
    email: string;
    useCase: string;
    notes: string;
  }

  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('waitlistForm') as HTMLFormElement;
    const submitBtn = document.getElementById('submitBtn') as HTMLButtonElement;
    const submitText = document.getElementById('submitText') as HTMLSpanElement;
    const loadingText = document.getElementById('loadingText') as HTMLSpanElement;
    const successMessage = document.getElementById('successMessage') as HTMLDivElement;
    const errorMessage = document.getElementById('errorMessage') as HTMLDivElement;

    if (!form || !submitBtn || !submitText || !loadingText || !successMessage || !errorMessage) {
      console.error('Required form elements not found');
      return;
    }

    form.addEventListener('submit', async (e: Event) => {
      e.preventDefault();

      // Get form data
      const formData = new FormData(form);
      const data: WaitlistFormData = {
        name: formData.get('name') as string,
        email: formData.get('email') as string,
        useCase: formData.get('useCase') as string,
        notes: formData.get('notes') as string || ''
      };

      // Validate required fields
      if (!data.name || !data.email || !data.useCase) {
        showError('Please fill in all required fields.');
        return;
      }

      // Show loading state
      setLoadingState(true);
      hideMessages();

      try {
        const response = await fetch('https://forms.glasskube.com/api/v1/jetski/waitlist', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data)
        });

        if (response.ok) {
          showSuccess();
          form.reset();
        } else {
          const errorData = await response.json().catch(() => ({}));
          showError(errorData.message || 'Failed to join waitlist. Please try again.');
        }
      } catch (error) {
        console.error('Network error:', error);
        showError('Network error. Please check your connection and try again.');
      } finally {
        setLoadingState(false);
      }
    });

    function setLoadingState(loading: boolean): void {
      submitBtn.disabled = loading;
      if (loading) {
        submitText.classList.add('hidden');
        loadingText.classList.remove('hidden');
      } else {
        submitText.classList.remove('hidden');
        loadingText.classList.add('hidden');
      }
    }

    function showSuccess(): void {
      successMessage.classList.remove('hidden');
      errorMessage.classList.add('hidden');
    }

    function showError(message: string): void {
      const errorText = errorMessage.querySelector('p') as HTMLParagraphElement;
      if (errorText) {
        errorText.textContent = message;
      }
      errorMessage.classList.remove('hidden');
      successMessage.classList.add('hidden');
    }

    function hideMessages(): void {
      successMessage.classList.add('hidden');
      errorMessage.classList.add('hidden');
    }
  });
</script>
